<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RealEstateCompanyWebSite</name>
    </assembly>
    <members>
        <member name="T:RealEstateCompanyWebSite.BundleConfig">
            <summary>
            Bundles and minifies scripts
            </summary>
        </member>
        <member name="T:RealEstateCompanyWebSite.FilterConfig">
            <summary>
            Filter
            </summary>
        </member>
        <member name="T:RealEstateCompanyWebSite.RouteConfig">
            <summary>
            Route
            </summary>
        </member>
        <member name="T:RealEstateCompanyWebSite.Startup">
            <summary>
            Startup
            </summary>
            <summary>
            Main startup class for app
            </summary>
        </member>
        <member name="M:RealEstateCompanyWebSite.Startup.Configuration(Owin.IAppBuilder)">
            <summary>
            Configures the application
            </summary>
            <param name="app"></param>
        </member>
        <member name="T:RealEstateCompanyWebSite.WebApiConfig">
            <summary>
            Configuration manager
            </summary>
        </member>
        <member name="T:RealEstateCompanyWebSite.SQL.IdentityRole">
            <summary>
            Class that implements the ASP.NET Identity
            IRole interface 
            </summary>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.IdentityRole.#ctor">
            <summary>
            Default constructor for Role 
            </summary>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.IdentityRole.#ctor(System.String)">
            <summary>
            Constructor that takes names as argument 
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:RealEstateCompanyWebSite.SQL.IdentityRole.Id">
            <summary>
            Role ID
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.SQL.IdentityRole.Name">
            <summary>
            Role name
            </summary>
        </member>
        <member name="T:RealEstateCompanyWebSite.SQL.IdentityUser">
            <summary>
            Class that implements the ASP.NET Identity
            IUser interface 
            </summary>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.IdentityUser.#ctor">
            <summary>
            Default constructor 
            </summary>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.IdentityUser.#ctor(System.String)">
            <summary>
            Constructor that takes user name as argument
            </summary>
            <param name="userName"></param>
        </member>
        <member name="P:RealEstateCompanyWebSite.SQL.IdentityUser.Id">
            <summary>
            User ID
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.SQL.IdentityUser.DBID">
            <summary>
            Database id used for legacy purposes or when the GUID cannot be used
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.SQL.IdentityUser.UserName">
            <summary>
            User's name
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.SQL.IdentityUser.Email">
            <summary>
                Email
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.SQL.IdentityUser.EmailConfirmed">
            <summary>
                True if the email is confirmed, default is false
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.SQL.IdentityUser.PasswordHash">
            <summary>
                The salted/hashed form of the user password
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.SQL.IdentityUser.SecurityStamp">
            <summary>
                A random value that should change whenever a users credentials have changed (password changed, login removed)
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.SQL.IdentityUser.PhoneNumber">
            <summary>
                PhoneNumber for the user
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.SQL.IdentityUser.PhoneNumberConfirmed">
            <summary>
                True if the phone number is confirmed, default is false
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.SQL.IdentityUser.TwoFactorEnabled">
            <summary>
                Is two factor enabled for the user
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.SQL.IdentityUser.LockoutEndDateUtc">
            <summary>
                DateTime in UTC when lockout ends, any time in the past is considered not locked out.
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.SQL.IdentityUser.LockoutEnabled">
            <summary>
                Is lockout enabled for this user
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.SQL.IdentityUser.AccessFailedCount">
            <summary>
                Used to record failures for the purposes of lockout
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.SQL.IdentityUser.FirstName">
            <summary>
            First name of the user
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.SQL.IdentityUser.LastName">
            <summary>
            Last name of the user
            </summary>
        </member>
        <member name="T:RealEstateCompanyWebSite.SQL.MySQLDatabase">
            <summary>
            Class that encapsulates a MySQL database connections 
            and CRUD operations
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:RealEstateCompanyWebSite.SQL.MySQLDatabase.#ctor" -->
        <member name="M:RealEstateCompanyWebSite.SQL.MySQLDatabase.#ctor(System.String)">
            <summary>
            Constructor which takes the connection string name
            </summary>
            <param name="connectionStringName"></param>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.MySQLDatabase.Execute(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Executes a non-query MySQL statement
            </summary>
            <param name="commandText">The MySQL query to execute</param>
            <param name="parameters">Optional parameters to pass to the query</param>
            <returns>The count of records affected by the MySQL statement</returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.MySQLDatabase.QueryValue(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Executes a MySQL query that returns a single scalar value as the result.
            </summary>
            <param name="commandText">The MySQL query to execute</param>
            <param name="parameters">Optional parameters to pass to the query</param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.MySQLDatabase.Query(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Executes a SQL query that returns a list of rows as the result.
            </summary>
            <param name="commandText">The MySQL query to execute</param>
            <param name="parameters">Parameters to pass to the MySQL query</param>
            <returns>A list of a Dictionary of Key, values pairs representing the 
            ColumnName and corresponding value</returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.MySQLDatabase.EnsureConnectionOpen">
            <summary>
            Opens a connection if not open
            </summary>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.MySQLDatabase.EnsureConnectionClosed">
            <summary>
            Closes a connection if open
            </summary>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.MySQLDatabase.CreateCommand(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates a MySQLCommand with the given parameters
            </summary>
            <param name="commandText">The MySQL query to execute</param>
            <param name="parameters">Parameters to pass to the MySQL query</param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.MySQLDatabase.AddParameters(MySql.Data.MySqlClient.MySqlCommand,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Adds the parameters to a MySQL command
            </summary>
            <param name="commandText">The MySQL query to execute</param>
            <param name="parameters">Parameters to pass to the MySQL query</param>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.MySQLDatabase.GetStrValue(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Helper method to return query a string value 
            </summary>
            <param name="commandText">The MySQL query to execute</param>
            <param name="parameters">Parameters to pass to the MySQL query</param>
            <returns>The string value resulting from the query</returns>
        </member>
        <member name="T:RealEstateCompanyWebSite.SQL.RoleStore`1">
            <summary>
            Class that implements the key ASP.NET Identity role store iterfaces
            </summary>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.RoleStore`1.#ctor">
            <summary>
            Default constructor that initializes a new MySQLDatabase
            instance using the Default Connection string
            </summary>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.RoleStore`1.#ctor(RealEstateCompanyWebSite.SQL.MySQLDatabase)">
            <summary>
            Constructor that takes a MySQLDatabase as argument 
            </summary>
            <param name="database"></param>
        </member>
        <member name="T:RealEstateCompanyWebSite.SQL.RoleTable">
            <summary>
            Class that represents the Role table in the MySQL Database
            </summary>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.RoleTable.#ctor(RealEstateCompanyWebSite.SQL.MySQLDatabase)">
            <summary>
            Constructor that takes a MySQLDatabase instance 
            </summary>
            <param name="database"></param>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.RoleTable.Delete(System.String)">
            <summary>
            Deltes a role from the Roles table
            </summary>
            <param name="roleId">The role Id</param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.RoleTable.Insert(RealEstateCompanyWebSite.SQL.IdentityRole)">
            <summary>
            Inserts a new Role in the Roles table
            </summary>
            <param name="roleName">The role's name</param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.RoleTable.GetRoleName(System.String)">
            <summary>
            Returns a role name given the roleId
            </summary>
            <param name="roleId">The role Id</param>
            <returns>Role name</returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.RoleTable.GetRoleId(System.String)">
            <summary>
            Returns the role Id given a role name
            </summary>
            <param name="roleName">Role's name</param>
            <returns>Role's Id</returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.RoleTable.GetRoleById(System.String)">
            <summary>
            Gets the IdentityRole given the role Id
            </summary>
            <param name="roleId"></param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.RoleTable.GetRoleByName(System.String)">
            <summary>
            Gets the IdentityRole given the role name
            </summary>
            <param name="roleName"></param>
            <returns></returns>
        </member>
        <member name="T:RealEstateCompanyWebSite.SQL.UserClaimsTable">
            <summary>
            Class that represents the UserClaims table in the MySQL Database
            </summary>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.UserClaimsTable.#ctor(RealEstateCompanyWebSite.SQL.MySQLDatabase)">
            <summary>
            Constructor that takes a MySQLDatabase instance 
            </summary>
            <param name="database"></param>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.UserClaimsTable.FindByUserId(System.String)">
            <summary>
            Returns a ClaimsIdentity instance given a userId
            </summary>
            <param name="userId">The user's id</param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.UserClaimsTable.Delete(System.String)">
            <summary>
            Deletes all claims from a user given a userId
            </summary>
            <param name="userId">The user's id</param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.UserClaimsTable.Insert(System.Security.Claims.Claim,System.String)">
            <summary>
            Inserts a new claim in UserClaims table
            </summary>
            <param name="userClaim">User's claim to be added</param>
            <param name="userId">User's id</param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.UserClaimsTable.Delete(RealEstateCompanyWebSite.SQL.IdentityUser,System.Security.Claims.Claim)">
            <summary>
            Deletes a claim from a user 
            </summary>
            <param name="user">The user to have a claim deleted</param>
            <param name="claim">A claim to be deleted from user</param>
            <returns></returns>
        </member>
        <member name="T:RealEstateCompanyWebSite.SQL.UserLoginsTable">
            <summary>
            Class that represents the UserLogins table in the MySQL Database
            </summary>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.UserLoginsTable.#ctor(RealEstateCompanyWebSite.SQL.MySQLDatabase)">
            <summary>
            Constructor that takes a MySQLDatabase instance 
            </summary>
            <param name="database"></param>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.UserLoginsTable.Delete(RealEstateCompanyWebSite.SQL.IdentityUser,Microsoft.AspNet.Identity.UserLoginInfo)">
            <summary>
            Deletes a login from a user in the UserLogins table
            </summary>
            <param name="user">User to have login deleted</param>
            <param name="login">Login to be deleted from user</param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.UserLoginsTable.Delete(System.String)">
            <summary>
            Deletes all Logins from a user in the UserLogins table
            </summary>
            <param name="userId">The user's id</param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.UserLoginsTable.Insert(RealEstateCompanyWebSite.SQL.IdentityUser,Microsoft.AspNet.Identity.UserLoginInfo)">
            <summary>
            Inserts a new login in the UserLogins table
            </summary>
            <param name="user">User to have new login added</param>
            <param name="login">Login to be added</param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.UserLoginsTable.FindUserIdByLogin(Microsoft.AspNet.Identity.UserLoginInfo)">
            <summary>
            Return a userId given a user's login
            </summary>
            <param name="userLogin">The user's login info</param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.UserLoginsTable.FindByUserId(System.String)">
            <summary>
            Returns a list of user's logins
            </summary>
            <param name="userId">The user's id</param>
            <returns></returns>
        </member>
        <member name="T:RealEstateCompanyWebSite.SQL.UserRolesTable">
            <summary>
            Class that represents the UserRoles table in the MySQL Database
            </summary>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.UserRolesTable.#ctor(RealEstateCompanyWebSite.SQL.MySQLDatabase)">
            <summary>
            Constructor that takes a MySQLDatabase instance 
            </summary>
            <param name="database"></param>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.UserRolesTable.FindByUserId(System.String)">
            <summary>
            Returns a list of user's roles
            </summary>
            <param name="userId">The user's id</param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.UserRolesTable.Delete(System.String)">
            <summary>
            Deletes all roles from a user in the UserRoles table
            </summary>
            <param name="userId">The user's id</param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.UserRolesTable.Insert(RealEstateCompanyWebSite.SQL.IdentityUser,System.String)">
            <summary>
            Inserts a new role for a user in the UserRoles table
            </summary>
            <param name="user">The User</param>
            <param name="roleId">The Role's id</param>
            <returns></returns>
        </member>
        <member name="T:RealEstateCompanyWebSite.SQL.UserStore`1">
            <summary>
            Class that implements the key ASP.NET Identity user store iterfaces
            </summary>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.UserStore`1.#ctor">
            <summary>
            Default constructor that initializes a new MySQLDatabase
            instance using the Default Connection string
            </summary>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.UserStore`1.#ctor(RealEstateCompanyWebSite.SQL.MySQLDatabase)">
            <summary>
            Constructor that takes a MySQLDatabase as argument 
            </summary>
            <param name="database"></param>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.UserStore`1.CreateAsync(`0)">
            <summary>
            Insert a new TUser in the UserTable
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.UserStore`1.FindByIdAsync(System.String)">
            <summary>
            Returns an TUser instance based on a userId query 
            </summary>
            <param name="userId">The user's Id</param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.UserStore`1.FindByNameAsync(System.String)">
            <summary>
            Returns an TUser instance based on a userName query 
            </summary>
            <param name="userName">The user's name</param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.UserStore`1.UpdateAsync(`0)">
            <summary>
            Updates the UsersTable with the TUser instance values
            </summary>
            <param name="user">TUser to be updated</param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.UserStore`1.AddClaimAsync(`0,System.Security.Claims.Claim)">
            <summary>
            Inserts a claim to the UserClaimsTable for the given user
            </summary>
            <param name="user">User to have claim added</param>
            <param name="claim">Claim to be added</param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.UserStore`1.GetClaimsAsync(`0)">
            <summary>
            Returns all claims for a given user
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.UserStore`1.RemoveClaimAsync(`0,System.Security.Claims.Claim)">
            <summary>
            Removes a claim froma user
            </summary>
            <param name="user">User to have claim removed</param>
            <param name="claim">Claim to be removed</param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.UserStore`1.AddLoginAsync(`0,Microsoft.AspNet.Identity.UserLoginInfo)">
            <summary>
            Inserts a Login in the UserLoginsTable for a given User
            </summary>
            <param name="user">User to have login added</param>
            <param name="login">Login to be added</param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.UserStore`1.FindAsync(Microsoft.AspNet.Identity.UserLoginInfo)">
            <summary>
            Returns an TUser based on the Login info
            </summary>
            <param name="login"></param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.UserStore`1.GetLoginsAsync(`0)">
            <summary>
            Returns list of UserLoginInfo for a given TUser
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.UserStore`1.RemoveLoginAsync(`0,Microsoft.AspNet.Identity.UserLoginInfo)">
            <summary>
            Deletes a login from UserLoginsTable for a given TUser
            </summary>
            <param name="user">User to have login removed</param>
            <param name="login">Login to be removed</param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.UserStore`1.AddToRoleAsync(`0,System.String)">
            <summary>
            Inserts a entry in the UserRoles table
            </summary>
            <param name="user">User to have role added</param>
            <param name="roleName">Name of the role to be added to user</param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.UserStore`1.GetRolesAsync(`0)">
            <summary>
            Returns the roles for a given TUser
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.UserStore`1.IsInRoleAsync(`0,System.String)">
            <summary>
            Verifies if a user is in a role
            </summary>
            <param name="user"></param>
            <param name="role"></param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.UserStore`1.RemoveFromRoleAsync(`0,System.String)">
            <summary>
            Removes a user from a role
            </summary>
            <param name="user"></param>
            <param name="role"></param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.UserStore`1.DeleteAsync(`0)">
            <summary>
            Deletes a user
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.UserStore`1.GetPasswordHashAsync(`0)">
            <summary>
            Returns the PasswordHash for a given TUser
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.UserStore`1.HasPasswordAsync(`0)">
            <summary>
            Verifies if user has password
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.UserStore`1.SetPasswordHashAsync(`0,System.String)">
            <summary>
            Sets the password hash for a given TUser
            </summary>
            <param name="user"></param>
            <param name="passwordHash"></param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.UserStore`1.SetSecurityStampAsync(`0,System.String)">
            <summary>
             Set security stamp
            </summary>
            <param name="user"></param>
            <param name="stamp"></param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.UserStore`1.GetSecurityStampAsync(`0)">
            <summary>
            Get security stamp
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.UserStore`1.SetEmailAsync(`0,System.String)">
            <summary>
            Set email on user
            </summary>
            <param name="user"></param>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.UserStore`1.GetEmailAsync(`0)">
            <summary>
            Get email from user
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.UserStore`1.GetEmailConfirmedAsync(`0)">
            <summary>
            Get if user email is confirmed
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.UserStore`1.SetEmailConfirmedAsync(`0,System.Boolean)">
            <summary>
            Set when user email is confirmed
            </summary>
            <param name="user"></param>
            <param name="confirmed"></param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.UserStore`1.FindByEmailAsync(System.String)">
            <summary>
            Get user by email
            </summary>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.UserStore`1.SetPhoneNumberAsync(`0,System.String)">
            <summary>
            Set user phone number
            </summary>
            <param name="user"></param>
            <param name="phoneNumber"></param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.UserStore`1.GetPhoneNumberAsync(`0)">
            <summary>
            Get user phone number
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.UserStore`1.GetPhoneNumberConfirmedAsync(`0)">
            <summary>
            Get if user phone number is confirmed
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.UserStore`1.SetPhoneNumberConfirmedAsync(`0,System.Boolean)">
            <summary>
            Set phone number if confirmed
            </summary>
            <param name="user"></param>
            <param name="confirmed"></param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.UserStore`1.SetTwoFactorEnabledAsync(`0,System.Boolean)">
            <summary>
            Set two factor authentication is enabled on the user
            </summary>
            <param name="user"></param>
            <param name="enabled"></param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.UserStore`1.GetTwoFactorEnabledAsync(`0)">
            <summary>
            Get if two factor authentication is enabled on the user
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.UserStore`1.GetLockoutEndDateAsync(`0)">
            <summary>
            Get user lock out end date
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.UserStore`1.SetLockoutEndDateAsync(`0,System.DateTimeOffset)">
            <summary>
            Set user lockout end date
            </summary>
            <param name="user"></param>
            <param name="lockoutEnd"></param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.UserStore`1.IncrementAccessFailedCountAsync(`0)">
            <summary>
            Increment failed access count
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.UserStore`1.ResetAccessFailedCountAsync(`0)">
            <summary>
            Reset failed access count
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.UserStore`1.GetAccessFailedCountAsync(`0)">
            <summary>
            Get failed access count
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.UserStore`1.GetLockoutEnabledAsync(`0)">
            <summary>
            Get if lockout is enabled for the user
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.UserStore`1.SetLockoutEnabledAsync(`0,System.Boolean)">
            <summary>
            Set lockout enabled for user
            </summary>
            <param name="user"></param>
            <param name="enabled"></param>
            <returns></returns>
        </member>
        <member name="T:RealEstateCompanyWebSite.SQL.Identity.UserTable`1">
            <summary>
            Class that represents the Users table in the MySQL Database
            </summary>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.Identity.UserTable`1.#ctor(RealEstateCompanyWebSite.SQL.MySQLDatabase)">
            <summary>
            Constructor that takes a MySQLDatabase instance 
            </summary>
            <param name="database"></param>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.Identity.UserTable`1.GetUserName(System.String)">
            <summary>
            Returns the user's name given a user id
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.Identity.UserTable`1.GetUserId(System.String)">
            <summary>
            Returns a User ID given a user name
            </summary>
            <param name="userName">The user's name</param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.Identity.UserTable`1.GetUserById(System.String)">
            <summary>
            Returns an TUser given the user's id
            </summary>
            <param name="userId">The user's id</param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.Identity.UserTable`1.GetUserByEmail(System.String)">
            <summary>
            Returns an TUser given the user's email
            </summary>
            <param name="userId">The user's email</param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.Identity.UserTable`1.GetUserByName(System.String)">
            <summary>
            Returns a list of TUser instances given a user name
            </summary>
            <param name="userName">User's name</param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.Identity.UserTable`1.GetPasswordHash(System.String)">
            <summary>
            Return the user's password hash
            </summary>
            <param name="userId">The user's id</param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.Identity.UserTable`1.SetPasswordHash(System.String,System.String)">
            <summary>
            Sets the user's password hash
            </summary>
            <param name="userId"></param>
            <param name="passwordHash"></param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.Identity.UserTable`1.GetSecurityStamp(System.String)">
            <summary>
            Returns the user's security stamp
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.Identity.UserTable`1.Insert(`0)">
            <summary>
            Inserts a new user in the Users table
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.Identity.UserTable`1.Delete(System.String)">
            <summary>
            Deletes a user from the Users table
            </summary>
            <param name="userId">The user's id</param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.Identity.UserTable`1.Delete(`0)">
            <summary>
            Deletes a user from the Users table
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.SQL.Identity.UserTable`1.Update(`0)">
            <summary>
            Updates a user in the Users table
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="T:RealEstateCompanyWebSite.Controllers.AccountController">
            <summary> 
            Controls output for login
            </summary>
        </member>
        <member name="M:RealEstateCompanyWebSite.Controllers.AccountController.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:RealEstateCompanyWebSite.Controllers.AccountController.#ctor(Microsoft.AspNet.Identity.UserManager{RealEstateCompanyWebSite.Models.ApplicationUser})">
            <summary>
            Constructor
            </summary>
            <param name="userManager"></param>
        </member>
        <member name="M:RealEstateCompanyWebSite.Controllers.AccountController.Login(System.String)">
            <summary>
            Performs login
            </summary>
            <param name="returnUrl"></param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.Controllers.AccountController.Login(RealEstateCompanyWebSite.Models.LoginViewModel,System.String)">
            <summary>
            Async login
            </summary>
            <param name="model"></param>
            <param name="returnUrl"></param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.Controllers.AccountController.Register">
            <summary>
            Register
            </summary>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.Controllers.AccountController.Register(RealEstateCompanyWebSite.Models.RegisterViewModel)">
            <summary>
            Post async register
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.Controllers.AccountController.Disassociate(System.String,System.String)">
            <summary>
            Dissaciate from login
            </summary>
            <param name="loginProvider"></param>
            <param name="providerKey"></param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.Controllers.AccountController.Manage(System.Nullable{RealEstateCompanyWebSite.Controllers.AccountController.ManageMessageId})">
            <summary>
            Change password
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.Controllers.AccountController.Manage(RealEstateCompanyWebSite.Models.ManageUserViewModel)">
            <summary>
            Async post change password
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.Controllers.AccountController.ExternalLogin(System.String,System.String)">
            <summary>
            External login. Not used
            </summary>
            <param name="provider"></param>
            <param name="returnUrl"></param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.Controllers.AccountController.ExternalLoginCallback(System.String)">
            <summary>
            Exterval login callback.
            </summary>
            <param name="returnUrl"></param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.Controllers.AccountController.LinkLogin(System.String)">
            <summary>
            Links external logins
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.Controllers.AccountController.LinkLoginCallback">
            <summary>
            Callback for linking of external login
            </summary>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.Controllers.AccountController.ExternalLoginConfirmation(RealEstateCompanyWebSite.Models.ExternalLoginConfirmationViewModel,System.String)">
            <summary>
            Confirmation if external login was successfull
            </summary>
            <param name="model"></param>
            <param name="returnUrl"></param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.Controllers.AccountController.LogOff">
            <summary>
            Logout
            </summary>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.Controllers.AccountController.ExternalLoginFailure">
            <summary>
            Failure of external login
            </summary>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.Controllers.AccountController.RemoveAccountList">
            <summary>
            Remove account list
            </summary>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.Controllers.AccountController.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:RealEstateCompanyWebSite.Controllers.AccountController.UserManager">
            <summary>
            User manager
            </summary>
        </member>
        <member name="T:RealEstateCompanyWebSite.Controllers.AccountController.ManageMessageId">
            <summary>
            Password change status
            </summary>
        </member>
        <member name="T:RealEstateCompanyWebSite.Controllers.DataController">
            <summary>
            This class poses a JSON API to get data from the database
            </summary>
        </member>
        <member name="M:RealEstateCompanyWebSite.Controllers.DataController.EnumerateTable(System.String,System.String,System.String)">
            <summary>
            Returns all column entries for a specified table
            </summary>
            <param name="tableName">Name of table</param>
            <param name="columnName">Name of table to return</param>
            <returns>Returns columnName from tableName</returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.Controllers.DataController.GetProvinces">
            <summary>
            Returns a dictionary of provinces
            </summary>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.Controllers.DataController.GetProvincesArr">
            <summary>
            Returns a list of provinces from the provinces table
            </summary>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.Controllers.DataController.Cities">
            <summary>
            Returns all cities for a given provinces as a JSON array
            </summary>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.Controllers.DataController.Areas">
            <summary>
            Returns all areas for a given city as a JSON array
            </summary>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.Controllers.DataController.SendEmail">
            <summary>
            Calling this will send an email for the interested buyer to an agent with the parameters specified in post
            </summary>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.Controllers.DataController.SendEmailContact">
            <summary>
            Calling this will send an email to a specified agent for a general query
            </summary>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.Controllers.DataController.Search">
            <summary>
            Searches for properties based on features, location and keywords that are given via post parameters.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.Controllers.DataController.GetCurrentUser">
            <summary>
            Returns the logged in user
            </summary>
            <returns></returns>
        </member>
        <member name="T:RealEstateCompanyWebSite.Controllers.HomeController">
            <summary>
            Controls output for home page
            </summary>
        </member>
        <member name="M:RealEstateCompanyWebSite.Controllers.HomeController.Index">
            <summary>
            Returns the index view
            </summary>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.Controllers.HomeController.About">
            <summary>
            Returns the about view
            </summary>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.Controllers.HomeController.Contact">
            <summary>
            Returns the contact view and lists all agents
            </summary>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.Controllers.EstatesController.Index">
            <summary>
            Returns index
            </summary>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.Controllers.EstatesController.Details(System.Int32)">
            <summary>
            Returns details
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.Controllers.EstatesController.Estates">
            <summary>
            Returns estates
            </summary>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.Controllers.EstatesController.Create(System.Web.Mvc.FormCollection)">
            <summary>
            Nothing
            </summary>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.Controllers.EstatesController.Edit(System.Int32)">
            <summary>
            Nothing
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.Controllers.EstatesController.Edit(System.Int32,System.Web.Mvc.FormCollection)">
            <summary>
            Nothing
            </summary>
            <param name="id"></param>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.Controllers.EstatesController.Delete(System.Int32)">
            <summary>
            Nothing
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.Controllers.EstatesController.Search">
            <summary>
            Searches for a property given the required post parameters
            </summary>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.Controllers.EstatesController.Residence">
            <summary>
            Lists a residence for a specific id
            </summary>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.Controllers.EstatesController.Delete(System.Int32,System.Web.Mvc.FormCollection)">
            <summary>
            Nothing
            </summary>
            <param name="id"></param>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.Controllers.EstatesController.Cities">
            <summary>
            Nothing
            </summary>
            <returns></returns>
        </member>
        <member name="T:RealEstateCompanyWebSite.DatabaseConnection">
            <summary>
            Helper class for db connections
            </summary>
        </member>
        <member name="M:RealEstateCompanyWebSite.DatabaseConnection.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:RealEstateCompanyWebSite.DatabaseConnection.Reopen">
            <summary>
            Opens the mysql connection
            </summary>
        </member>
        <member name="M:RealEstateCompanyWebSite.DatabaseConnection.Close">
            <summary>
            Closes the mysql connection
            </summary>
        </member>
        <member name="M:RealEstateCompanyWebSite.DatabaseConnection.PrepareCommand">
            <summary>
            Creates a mysql command
            </summary>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.DatabaseConnection.Query(MySql.Data.MySqlClient.MySqlCommand)">
            <summary>
            Runs a mysqlcommand
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.DatabaseConnection.Query(System.String)">
            <summary>
            Returns a reader for a sql query
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.DatabaseConnection.QueryYield(System.String)">
            <summary>
            Lazy query
            </summary>
            <param name="qry"></param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.DatabaseConnection.Escape(System.String)">
            <summary>
            Escape a string properly
            </summary>
            <param name="usString"></param>
            <returns></returns>
        </member>
        <member name="T:RealEstateCompanyWebSite.Email.IEmail">
            <summary>
            Interface for sending mail messages
            </summary>
        </member>
        <member name="M:RealEstateCompanyWebSite.Email.IEmail.Send(System.Net.Mail.MailMessage)">
            <summary>
            Sends a mail message
            </summary>
            <param name="msg"></param>
        </member>
        <member name="T:RealEstateCompanyWebSite.Email.StandardSMTPEmailer">
            <summary>
            Simple email client that sends an email message through SMTP
            </summary>
        </member>
        <member name="M:RealEstateCompanyWebSite.Email.StandardSMTPEmailer.Send(System.Net.Mail.MailMessage)">
            <summary>
            Sends a MailMessage through SMTP using the default parameters in the configuration manager
            </summary>
            <param name="msg"></param>
        </member>
        <member name="T:RealEstateCompanyWebSite.Hashers.PlainTextHasher">
            <summary>
            Simple password hasher that returns plain text
            </summary>
        </member>
        <member name="M:RealEstateCompanyWebSite.Hashers.PlainTextHasher.HashPassword(System.String)">
            <summary>
            Returns password
            </summary>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.Hashers.PlainTextHasher.VerifyHashedPassword(System.String,System.String)">
            <summary>
            Returns whether the two password match
            </summary>
            <param name="hashedPassword"></param>
            <param name="providedPassword"></param>
            <returns></returns>
        </member>
        <member name="T:RealEstateCompanyWebSite.Hashers.PBKDF2Sha1Hasher">
            <summary>
            Generates hashes using PBKDF2 Sha1
            </summary>
        </member>
        <member name="F:RealEstateCompanyWebSite.Hashers.PBKDF2Sha1Hasher.SALT_BYTE_SIZE">
            <summary>
            Number of bytes for salt
            </summary>
        </member>
        <member name="F:RealEstateCompanyWebSite.Hashers.PBKDF2Sha1Hasher.HASH_BYTE_SIZE">
            <summary>
            Number of bytes for hash
            </summary>
        </member>
        <member name="F:RealEstateCompanyWebSite.Hashers.PBKDF2Sha1Hasher.PBKDF2_ITERATIONS">
            <summary>
            Number of iterations for PBKDF2
            </summary>
        </member>
        <member name="F:RealEstateCompanyWebSite.Hashers.PBKDF2Sha1Hasher.ITERATION_INDEX">
            <summary>
            Index of iteration
            </summary>
        </member>
        <member name="F:RealEstateCompanyWebSite.Hashers.PBKDF2Sha1Hasher.SALT_INDEX">
            <summary>
            Location of salt
            </summary>
        </member>
        <member name="F:RealEstateCompanyWebSite.Hashers.PBKDF2Sha1Hasher.PBKDF2_INDEX">
            <summary>
            Location of hash
            </summary>
        </member>
        <member name="M:RealEstateCompanyWebSite.Hashers.PBKDF2Sha1Hasher.CreateHash(System.String)">
            <summary>
            Creates a hash for the given password
            </summary>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.Hashers.PBKDF2Sha1Hasher.ValidatePassword(System.String,System.String)">
            <summary>
            Returns true if the passwords match
            </summary>
            <param name="password">Plain text password</param>
            <param name="correctHash">Hashed password</param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.Hashers.PBKDF2Sha1Hasher.HashPassword(System.String)">
            <summary>
            Interface function for hashing password. Returns hashed password
            </summary>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.Hashers.PBKDF2Sha1Hasher.VerifyHashedPassword(System.String,System.String)">
            <summary>
            Interface function for hashing password. Returns whether the password match
            </summary>
            <param name="hashedPassword">Hashed password</param>
            <param name="providedPassword">Plaintext password</param>
            <returns>PasswordVerificationResult.Success if passwords match else PasswordVerificationResult.Failed </returns>
        </member>
        <member name="T:RealEstateCompanyWebSite.Models.ExternalLoginConfirmationViewModel">
            <summary>
            Represents username of an external login service
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.Models.ExternalLoginConfirmationViewModel.UserName">
            <summary>
            Username
            </summary>
        </member>
        <member name="T:RealEstateCompanyWebSite.Models.ManageUserViewModel">
            <summary>
            Model for changing user password
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.Models.ManageUserViewModel.OldPassword">
            <summary>
            Previous password
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.Models.ManageUserViewModel.NewPassword">
            <summary>
            New password
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.Models.ManageUserViewModel.ConfirmPassword">
            <summary>
            Verification of new password
            </summary>
        </member>
        <member name="T:RealEstateCompanyWebSite.Models.LoginViewModel">
            <summary>
            Model used for login
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.Models.LoginViewModel.Email">
            <summary>
            Username
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.Models.LoginViewModel.Password">
            <summary>
            Password
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.Models.LoginViewModel.RememberMe">
            <summary>
            Remember session
            </summary>
        </member>
        <member name="T:RealEstateCompanyWebSite.Models.RegisterViewModel">
            <summary>
            Model used for registration
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.Models.RegisterViewModel.UserName">
            <summary>
            Username
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.Models.RegisterViewModel.FirstName">
            <summary>
            First name of user
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.Models.RegisterViewModel.LastName">
            <summary>
            Last name of user
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.Models.RegisterViewModel.PhoneNumber">
            <summary>
            Phone number of user
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.Models.RegisterViewModel.Email">
            <summary>
            Email of user
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.Models.RegisterViewModel.Password">
            <summary>
            Password of user
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.Models.RegisterViewModel.ConfirmPassword">
            <summary>
            Confirmation password
            </summary>
        </member>
        <member name="T:RealEstateCompanyWebSite.Models.Agent">
            <summary>
            Model of agent
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.Models.Agent.Agent_Id">
            <summary>
            Id of agent
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.Models.Agent.Agent_Name">
            <summary>
            First name of agent
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.Models.Agent.Agent_Surname">
            <summary>
            Last name of agent
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.Models.Agent.Agent_Phone">
            <summary>
            Main phone number of agent
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.Models.Agent.Agent_Email">
            <summary>
            Email of agent
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.Models.Agent.Agent_Description">
            <summary>
            Short description of agent
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.Models.Agent.Image_URL">
            <summary>
            Profile image of agent
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.Models.Agent.Agent_FullName">
            <summary>
            Full name of agent (includes first and last name)
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.Models.Agent.Agent_PhoneString">
            <summary>
            Readable phone number of agent
            </summary>
        </member>
        <member name="T:RealEstateCompanyWebSite.Models.Area">
            <summary>
            Model of area
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.Models.Area.AreaId">
            <summary>
            Id of area
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.Models.Area.AreaName">
            <summary>
            Name of area
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.Models.Area.Longitude">
            <summary>
            Longitude of area
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.Models.Area.Lattitude">
            <summary>
            Latitude of area
            </summary>
        </member>
        <member name="T:RealEstateCompanyWebSite.Models.City">
            <summary>
            Model of city
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.Models.City.CityId">
            <summary>
            Id of city
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.Models.City.CityName">
            <summary>
            Name of city
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.Models.City.Longitude">
            <summary>
            Longitude of city
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.Models.City.Lattitude">
            <summary>
            Latitude of city
            </summary>
        </member>
        <member name="M:RealEstateCompanyWebSite.Models.Preferences.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:RealEstateCompanyWebSite.Models.Preferences.IsSomethingSet">
            <summary>
            Returns whether some fields were intitialized
            </summary>
            <returns></returns>
        </member>
        <member name="M:RealEstateCompanyWebSite.Models.Preferences.Insert(System.String)">
            <summary>
            Inserts the preferences into the database
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="P:RealEstateCompanyWebSite.Models.Preferences.PreferenceID">
            <summary>
            ID of this preference
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.Models.Preferences.ClientID">
            <summary>
            ID of client
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.Models.Preferences.MinBedrooms">
            <summary>
            Minimum Bedrooms
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.Models.Preferences.MaxBedrooms">
            <summary>
            Maximum Bedrooms
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.Models.Preferences.MinBathrooms">
            <summary>
            Minimum Bathrooms
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.Models.Preferences.MaxBathrooms">
            <summary>
            Maximum Bathrooms
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.Models.Preferences.MinGarages">
            <summary>
            Minimum Garages
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.Models.Preferences.MaxGarages">
            <summary>
            Maximum Garages
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.Models.Preferences.HasPool">
            <summary>
            Is there a pool? null is any
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.Models.Preferences.MinPlotSize">
            <summary>
            Minimum Plot Size
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.Models.Preferences.MaxPlotSize">
            <summary>
            Maximum Plot Size
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.Models.Preferences.MinHouseSize">
            <summary>
            Minimum House Size
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.Models.Preferences.MaxHouseSize">
            <summary>
            Maximum House Size
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.Models.Preferences.MinPrice">
            <summary>
            Minimum Price
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.Models.Preferences.MaxPrice">
            <summary>
            Maximum Price
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.Models.Preferences.Area_ID">
            <summary>
            ID of area
            </summary>
        </member>
        <member name="T:RealEstateCompanyWebSite.Models.Province">
            <summary>
            Model of province
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.Models.Province.ProvinceId">
            <summary>
            Id of province
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.Models.Province.ProvinceName">
            <summary>
            Name of province
            </summary>
        </member>
        <member name="T:RealEstateCompanyWebSite.Queries.IQuery">
            <summary>
            Basic interface for advanced queries
            </summary>
        </member>
        <member name="M:RealEstateCompanyWebSite.Queries.IQuery.GenerateResults">
            <summary>
            This function returns the results of the query
            </summary>
            <returns></returns>
        </member>
        <member name="T:RealEstateCompanyWebSite.Models.Residence">
            <summary>
            Model of residence in DB
            </summary>
        </member>
        <member name="M:RealEstateCompanyWebSite.Models.Residence.#ctor">
            <summary>
            Constructor for empty residence
            </summary>
        </member>
        <member name="M:RealEstateCompanyWebSite.Models.Residence.#ctor(System.Int32)">
            <summary>
            Build residence from DB from given id
            </summary>
            <param name="id"></param>
        </member>
        <member name="P:RealEstateCompanyWebSite.Models.Residence.Id">
            <summary>
            Id of property
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.Models.Residence.Name">
            <summary>
            Name of property
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.Models.Residence.StreetAddress">
            <summary>
            Street address of property
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.Models.Residence.NoBathrooms">
            <summary>
            Number of bathrooms
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.Models.Residence.NoBedrooms">
            <summary>
            Number of bedrooms
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.Models.Residence.Area">
            <summary>
            Plot area of property
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.Models.Residence.CityId">
            <summary>
            Id of city in which property resides
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.Models.Residence.ProvinceId">
            <summary>
            Id province in which property resides
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.Models.Residence.CityName">
            <summary>
            Name of city in which property resides
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.Models.Residence.ProvinceName">
            <summary>
            Name of property in which property resides
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.Models.Residence.PostalCode">
            <summary>
            Postal code of property
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.Models.Residence.Description">
            <summary>
            Short description of property
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.Models.Residence.Longitude">
            <summary>
            Longitude of property
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.Models.Residence.Lattitude">
            <summary>
            Lattitude of property
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.Models.Residence.ImagePreview">
            <summary>
            Main image of property
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.Models.Residence.Price">
            <summary>
            Price of property
            </summary>
        </member>
        <member name="T:RealEstateCompanyWebSite.Models.ApplicationUser">
            <summary>
            Application user
            </summary>
        </member>
        <member name="T:RealEstateCompanyWebSite.Models.ApplicationDbContext">
            <summary>
            Insert comments like this yah
            </summary>
        </member>
        <member name="T:RealEstateCompanyWebSite.SearchQuery">
            <summary>
            Query class to query advanced features. Able to search for keywords, property features and location
            </summary>
        </member>
        <member name="M:RealEstateCompanyWebSite.SearchQuery.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="connectionString">Connection string for database</param>
        </member>
        <member name="M:RealEstateCompanyWebSite.SearchQuery.Close">
            <summary>
            Close connection
            </summary>
        </member>
        <member name="M:RealEstateCompanyWebSite.SearchQuery.SetKeywords(System.String)">
            <summary>
            Split keywords into array of keywords
            </summary>
            <param name="keywords"></param>
        </member>
        <member name="M:RealEstateCompanyWebSite.SearchQuery.SetKeywords(System.String[])">
            <summary>
            Assign list of keywords
            </summary>
            <param name="keywords"></param>
        </member>
        <member name="M:RealEstateCompanyWebSite.SearchQuery.GenerateResults">
            <summary>
            Return the results
            </summary>
            <returns></returns>
        </member>
        <member name="P:RealEstateCompanyWebSite.SearchQuery.Keywords">
            <summary>
            list of keywords to search for
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.SearchQuery.PriceMin">
            <summary>
            Minimum listing price
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.SearchQuery.PriceMax">
            <summary>
            Maximum listing price
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.SearchQuery.BedroomsMin">
            <summary>
            Minimum number of bedrooms
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.SearchQuery.BedroomsMax">
            <summary>
            Maximum number of bedrooms
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.SearchQuery.BathroomsMin">
            <summary>
            Minimum number of bathrooms
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.SearchQuery.BathroomsMax">
            <summary>
            Maximum number of bathrooms
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.SearchQuery.GaragesMin">
            <summary>
            Minimum number of car parking spaces
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.SearchQuery.GaragesMax">
            <summary>
            Maximum number of car parking spaces
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.SearchQuery.PlotSizeMin">
            <summary>
            Minimum area of plot
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.SearchQuery.PlotSizeMax">
            <summary>
            Maximum area of plot
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.SearchQuery.HouseSizeMin">
            <summary>
            Minimum area of house
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.SearchQuery.HouseSizeMax">
            <summary>
            Maximum area of house
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.SearchQuery.ProvinceId">
            <summary>
            Province of property
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.SearchQuery.City_Id">
            <summary>
            City of property
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.SearchQuery.Area_Id">
            <summary>
            Area (location) of property
            </summary>
        </member>
        <member name="P:RealEstateCompanyWebSite.SearchQuery.HasPool">
            <summary>
            Indicates if a property should have a pool
            null for any
            </summary>
        </member>
        <member name="T:RealEstateCompanyWebSite.TableBuilder">
            <summary>
            Helper class to generate HTML for table
            </summary>
            <example>How to use:
            <code>
            TableBuilder builder = new TableBuilder();
            builder.SetHeaderTitle("name", "surname", "age");
            builder.AddRow("Johny", "Walker", 34);  
            ViewBag.Message = builder.ToHTML();      
            </code></example>
        </member>
        <member name="M:RealEstateCompanyWebSite.TableBuilder.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:RealEstateCompanyWebSite.TableBuilder.SetHeaderTitle(System.String[])">
            <summary>
            Sets the header title for the table
            </summary>
            <param name="names">List of header titles</param>
        </member>
        <member name="M:RealEstateCompanyWebSite.TableBuilder.AddRow(System.String[])">
            <summary>
            Adds a row to the table
            </summary>
            <param name="dataItems">List of items in row</param>
        </member>
        <member name="M:RealEstateCompanyWebSite.TableBuilder.ToHTML">
            <summary>
            Outputs the HTML for the table
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
