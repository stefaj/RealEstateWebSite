@{
    ///
    ///
    ///
    
    ViewBag.Title = "Houses";
}
  <br />  <br />
<div class="container">
    <div id="magic"></div>    

</div>

<div id="test"></div>


<script type="text/jsx">

    

    var ProvinceBox = React.createClass(
    {
    change: function(event){
        this.props.onSelection(event.target.value);
    },
    render: function(){
    return(
    <select className="form-control" classID="provinceSelect" ref="province" onChange={this.change}>
        <option>Any</option>
        @foreach (var province in ViewBag.Provinces)
        {
            <option value="@province.ProvinceId">@province.ProvinceName</option>
        }
    </select>
    );
    }
     });

    var CityBox = React.createClass(
    {
        change: function(event){
            this.props.onSelection(event.target.value);
        },

       render : function()
       {

        var cities = this.props.data.map(function (city)
          {
            return(
              <option value={city.CityId}>
                {city.CityName}
              </option>
              );
          });
        return(
        <select ref="city" className="form-control" id="citiesSelect" onChange={this.change}>
            {cities}                        
        </select>
        );
       } 
    });

    var AreaBox = React.createClass(
    {
       render : function()
       {

        var areas = this.props.data.map(function (area)
          {
            return(
              <option value={area.AreaId}>
                {area.AreaName}
              </option>
              );
          });
        return(
        <select ref="area" className="form-control" id="areasSelect">
            {areas}                        
        </select>
        );
       } 
    });

    var PropertyItem = React.createClass(
    {
        render : function()
        {
            return (
                <div className='col-lg-3 col-xs-3'>
                <div className='propertyItem well'>
                <div className='property-item'>
                    <h3><span>{this.props.data.street.toUpperCase()}</span></h3>
                    <p>{this.props.data.city}</p>
                </div>
                    <div className='propertyContent'>
                        <a className='propertyType' href={this.props.data.link}>{1}</a>
                        <a className='propertyImgLink' href={this.props.data.link}>
                            <img className='propertyImg' src={this.props.data.image} />
                        </a>
                    </div>
                    <div className="property-price propertyDetails">
                        <span><img  className='featureIco' src='/Assets/Images/icon-price.png'/>{this.props.data.price}</span>
                    </div>
                    <div className='divider thin'></div>
                    <table border='1' className='propertyDetails'>
                        <tbody>
                            <tr>
                                <td><img className='featureIco' src='/Assets/Images/icon-area.png'  />{this.props.data.area}</td>
                                <td><img className ='featureIco' src='/Assets/Images/icon-bed.png' />{this.props.data.bedrooms}</td>
                                <td><img className ='featureIco' src='/Assets/Images/icon-drop.png' />{this.props.data.bathrooms}</td>
                            </tr>
                        </tbody>
                    </table>
                </div>

            </div>
                );
        }
    });

    var PropertiesList = React.createClass(
    {
        
        render : function()
        {
          i=0;
          var properties = this.props.data.map(function (datum)
          {
            i += 1;
            if(i==5)
            {
                i=0;

                return(
                    <div>
                    <div className="clearfix visible-xs-block"></div>
                    <PropertyItem data={datum} />
                    </div>
                    );
            }
            else
            {
            return(
              <PropertyItem data={datum} />
              );
            }
          });

          if(this.props.data.length < 1)
            properties = [];

          return(


            <div className="properties row">
            
              {properties}
            </div>

            );
        
        }
    });

    var SearchPage = React.createClass(
    {
        handleNewProperties : function(data)
        {
            this.setState({properties: data});
        },

        getInitialState : function()
        {
            return {properties:[]};
        },
        
        render : function()
        {
            return(

                <div id='magic'>
                    <div className='property-heading'>
                    <h2><span>SEARCH FOR A PROPERTY</span></h2>
                             <SearchForm onNewProperties={this.handleNewProperties} />              
                    </div>

                    <section className='propertiesSection'>
                        <h3>Searched properties</h3>
                        <div className='divider'></div>
                        <div className="well well-lg">
                        <div>
                                <PropertiesList ref='propertyList' data={this.state.properties} />
                        </div>
                        </div>
                    </section>
                    
                </div>
                
           
                );
        }

    });

    var SearchForm = React.createClass(
    {
        handleAllChange : function(event)
        {
            this.updateSearch();
        },

        changeSearch: function(event)
        {
            event.preventDefault();
            this.setState({search_str: event.target.value});

        },

        search : function(searchData)
        {
            $.ajax(
          {
            url: '../Data/Search',
            dataType: 'json',
            cache: false,
            type: 'POST',
            data: searchData,
            success: function(data)
            {
                this.setState({properties: data});
                this.props.onNewProperties(data);
            }.bind(this)

          });
        },

        updateSearch : function()
        {
            var data = {
                searchStr: React.findDOMNode(this.refs.searchStr).value,
                priceRange: React.findDOMNode(this.refs.priceRange).value,
                noBedrooms: React.findDOMNode(this.refs.noBedrooms).value,
                noBathrooms: React.findDOMNode(this.refs.noBathrooms).value,
                noGarages: React.findDOMNode(this.refs.noGarages).value,
                city: React.findDOMNode(this.refs.citybox.refs.city).value,
                area: React.findDOMNode(this.refs.areabox.refs.area).value,
                province: React.findDOMNode(this.refs.provincebox.refs.province).value
              };
            this.search(data);
        },

        getCities : function(provinceid)
        {
          this.setState({cities: [{"CityId":-1,"CityName":"Loading..."}] });
          $.ajax(
          {
            url: '../Data/Cities',
            dataType: 'json',
            cache: false,
            type: 'POST',
            data: {province_id: provinceid},
            success: function(data)
            {
                var dataWithAny = [{"CityId":-1,"CityName":"Any"}].concat(data);
              this.setState({cities: dataWithAny});
            }.bind(this)

          });
        },

        getAreas : function(cityid)
        {
          this.setState({areas: [{"AreaId":-1,"AreaName":"Loading..."}] });
          $.ajax(
          {
            url: '../Data/Areas',
            dataType: 'json',
            cache: false,
            type: 'POST',
            data: {city_id: cityid},
            success: function(data)
            {
                var dataWithAny = [{"AreaId":-1,"AreaName":"Any"}].concat(data);
              this.setState({areas: dataWithAny});
            }.bind(this)

          });
        },

        getInitialState : function()
        {
            var search = '@ViewBag.search';


            var data = {
                searchStr: search,
              };

            
            this.search(data);

            return {cities: [{"CityId":-1,"CityName":"Any"}],
                    areas: [{"AreaId":-1,"AreaName":"Any"}],
                    search_str: search};
        },

        handleProvinceSelection : function(provinceid)
        {
  

           this.getCities(provinceid);
        },

        handleCitySelection : function(cityid)
        {

           this.getAreas(cityid);
        },

        handleSubmit : function(e)
        {
            e.preventDefault();
            this.updateSearch();
            
            return;
        
        },
        render: function()
        {
        return(
                <form className="form-inline" method="post" action="Search" onSubmit={this.handleSubmit}>
                 <div className="col-sm-7 searchbox">
                <div className="input-group input-block-level">
                    <input type="text" ref="searchStr" classID="SearchStr" onChange={this.changeSearch} value={this.state.search_str}
                    className="form-control" placeholder="Type in some criteria"  />
                    <span className="input-group-btn">
                        <button className="btn btn-warning big-btn" type="submit" value="Save">Search</button>
                    </span>
                </div>
            </div>
            <br />
            <br /><br />
            <div className="row">


                <div className="col-md-3">
                    <label>Maximum price</label>
                    <select ref="priceRange" className="form-control">
                        <option value="-1">Any</option>
                        <option value="1000000">R1 000 000</option>
                        <option value="2000000">R2 000 000</option>
                        <option value="4000000">R4 000 000</option>
                        <option value="8000000">R8 000 000</option>
                    </select>
                </div>

                <div className="col-md-3">
                    <label>Minimum bedrooms</label>
                    <select ref="noBedrooms" className="form-control">
                        <option value="-1">Any</option>
                        <option value="1">1</option>
                        <option value="2">2</option>
                        <option value="3">3</option>
                        <option value="4">4</option>
                        <option value="5">5</option>
                    </select>

                    <label>Minimum Bathrooms</label>
                    <select ref="noBathrooms" className="form-control">
                        <option value="-1">Any</option>
                        <option value="1">1</option>
                        <option value="2">2</option>
                        <option value="3">3</option>
                        <option value="4">4</option>
                    </select>

                    <label>Minimum Car parking spaces</label>
                    <select ref="noGarages" className="form-control">
                        <option value="-1">Any</option>
                        <option value="1">1</option>
                        <option value="2">2</option>
                        <option value="3">3</option>
                    </select>
                </div>

                <div className="col-md-3">
                    <label>Province</label>
                    <ProvinceBox ref='provincebox' onSelection={this.handleProvinceSelection}/>
       
                    <label>City</label>
                    <CityBox ref='citybox' data={this.state.cities} onSelection={this.handleCitySelection} />

                    <label>Area</label>
                    <AreaBox ref='areabox' data={this.state.areas} />

                </div>


                </div>
                </form>
            );
        }
    });
    
    React.render(<SearchPage />, document.getElementById('magic'));

</script>